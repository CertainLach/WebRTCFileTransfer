"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const xpress_1 = require("/home/f6cf/workspace/dest/xpress");
const xpress_support_ws_1 = require("/home/f6cf/workspace/dest/xpress-support-ws");
const fs_1 = require("/home/f6cf/workspace/dest/fs");
const server = new xpress_1.default('wrft');
xpress_support_ws_1.addSupport(server);
const sockets = {};
server.on('WS /', (req, socket, next) => {
    socket.id = (Math.random() * Number.MAX_SAFE_INTEGER).toString(36);
    console.log('User connected! Id: ' + socket.id);
    sockets[socket.id] = socket;
    console.log('Total connected: ' + Object.keys(sockets).length);
    socket.onmessage = msg => {
        console.log(msg.data);
        if (msg.data === 'is') {
            if (socket.type)
                return socket.close();
            socket.type = 'sender';
            socket.send('us' + socket.id);
        }
        else if (msg.data === 'ic') {
            if (socket.type)
                return socket.close();
            socket.type = 'receiver';
            socket.send('ur');
        }
        else if (msg.data.indexOf('ss') === 0) {
            if (socket.type !== 'receiver')
                return socket.close();
            socket.targetId = msg.data.slice(2);
            if (!sockets[socket.targetId])
                return socket.send('ws');
            if (sockets[socket.targetId].targetId)
                return socket.send('bs');
            sockets[socket.targetId].targetId = socket.id;
            sockets[socket.targetId].send('rf');
            socket.send('sf');
        }
        else if (msg.data.indexOf('gc') === 0) {
            if (!socket.type)
                return socket.close();
            socket.candidate = msg.data.slice(2);
            if (socket.candidate === 'null')
                return;
            if (!socket.targetId)
                return socket.close();
            sockets[socket.targetId].send('gc' + socket.candidate);
        }
        else if (msg.data.indexOf('sdp') === 0) {
            if (socket.type !== 'sender')
                return socket.close();
            socket.sdp = msg.data.slice(3);
            if (!socket.targetId)
                return socket.close();
            sockets[socket.targetId].send('sdp' + socket.sdp);
        }
        else if (msg.data.indexOf('cdp') === 0) {
            if (socket.type !== 'receiver')
                return socket.close();
            socket.cdp = msg.data.slice(3);
            if (!socket.targetId)
                return socket.close();
            sockets[socket.targetId].send('cdp' + socket.cdp);
        }
        else if (msg.data.indexOf('gdc') === 0) {
            if (socket.type !== 'receiver')
                return socket.close();
            if (!socket.targetId)
                return socket.close();
            sockets[socket.targetId].send('gdc');
        }
        else if (msg.data.indexOf('fs') === 0) {
            if (socket.type !== 'sender')
                return socket.close();
            if (!socket.targetId)
                return socket.close();
            sockets[socket.targetId].send(msg.data);
        }
    };
    socket.onclose = () => {
        console.log('User disconnected! Id: ' + socket.id);
        delete sockets[socket.id];
        console.log('Total connected: ' + Object.keys(sockets).length);
    };
});
server.on('GET /', (req, res, next) => {
    res.set('Content-Type', 'text/html');
    fs_1.getReadStream('./index.html').pipe(res);
});
server.on('ALL /sss', (req, res, next) => {
    console.log(req.query);
    req.on('data', d => console.log(d));
    res.send(123);
});
server.listenHttp('0.0.0.0', 8082);
//# sourceMappingURL=data:application/json;base64,
